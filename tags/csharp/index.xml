<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on </title>
    <link>https://www.davidhaney.io/tags/csharp/</link>
    <description>Recent content in csharp on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 19 Nov 2018 00:00:00 -0500</lastBuildDate><atom:link href="https://www.davidhaney.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.NET Core Azure Functions Tutorial</title>
      <link>https://www.davidhaney.io/net-core-azure-functions-tutorial/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.davidhaney.io/net-core-azure-functions-tutorial/</guid>
      <description>In this post I&amp;rsquo;d like to show you how I ported an Azure Classic Cloud Service application (which cost me $16 USD a month by the way) to a .NET Core Azure Function, and now host it in Azure for $0 a month!</description>
    </item>
    
    <item>
      <title>C# Probably Getting New &#34;Safe Navigation&#34; Operator &#34;?.&#34;</title>
      <link>https://www.davidhaney.io/c-probably-getting-new-safe-navigation-operator/</link>
      <pubDate>Fri, 28 Feb 2014 11:47:08 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/c-probably-getting-new-safe-navigation-operator/</guid>
      <description>It looks as if the Visual Studio dev team may be implementing a new operator in a future .NET release.This is due in large part to community demand, which is pretty cool because it shows that the VS team is listening to their customer base; a key part of a successful product.</description>
    </item>
    
    <item>
      <title>Trigger IValidatableObject.Validate When ModelState.IsValid is false</title>
      <link>https://www.davidhaney.io/trigger-ivalidatableobject-validate-when-modelstate-isvalid-is-false/</link>
      <pubDate>Wed, 05 Feb 2014 15:55:40 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/trigger-ivalidatableobject-validate-when-modelstate-isvalid-is-false/</guid>
      <description>I recently came across an ASP.NET MVC issue at work where the validation for my Model was not firing correctly. The Model implemented the IValidatableObject interface and thus the Validate method which did some specific logic to ensure the state of the Model (the ModelState).</description>
    </item>
    
    <item>
      <title>MVC4 Conditional HTML Attributes</title>
      <link>https://www.davidhaney.io/mvc4-conditional-html-attributes/</link>
      <pubDate>Wed, 27 Nov 2013 00:34:25 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/mvc4-conditional-html-attributes/</guid>
      <description>MVC4 made one simple and yet awesome improvement to View rendering that I don’t think many people are aware of.
Have you ever had to conditionally add an attribute to an HTML element in your MVC View based on the presence of a variable?</description>
    </item>
    
    <item>
      <title>Automatically Generate POCOs From DB With T4</title>
      <link>https://www.davidhaney.io/automatically-generate-pocos-from-db-with-t4/</link>
      <pubDate>Wed, 16 Oct 2013 21:35:51 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/automatically-generate-pocos-from-db-with-t4/</guid>
      <description>The T4 template engine is insanely powerful. I didn’t really realize just how powerful it was until I had a use case for it today. I stood up a database with about 40 tables in it, and planned to use an ORM to access the database.</description>
    </item>
    
    <item>
      <title>Web API Mapping QueryString/Form Input</title>
      <link>https://www.davidhaney.io/web-api-mapping-querystringform-input/</link>
      <pubDate>Wed, 24 Jul 2013 17:55:12 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/web-api-mapping-querystringform-input/</guid>
      <description>If you’re using the Web API as part of the MVC4 framework, you may encounter a scenario in which you must map parameters of strange names to variables for which characters of the name would be illegal.</description>
    </item>
    
    <item>
      <title>Generic Comparer</title>
      <link>https://www.davidhaney.io/generic-comparer/</link>
      <pubDate>Mon, 22 Apr 2013 14:53:17 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/generic-comparer/</guid>
      <description>Have you ever had to write a comparer for a specific type, only to be frustrated when you needed to write a second and third comparer for other types? Fear not, a generic comparer can take care of this for you!</description>
    </item>
    
    <item>
      <title>One More Thing About List Binary Search</title>
      <link>https://www.davidhaney.io/one-more-thing-about-list-binary-search/</link>
      <pubDate>Sat, 30 Mar 2013 15:36:24 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/one-more-thing-about-list-binary-search/</guid>
      <description>I wanted to point people to this link at DotNetPearls:
http://www.dotnetperls.com/binarysearchThey do an excellent, quick demonstration of List&amp;lt;T&amp;gt;.BinarySearch and show a graph that really drives home how much faster it is for large lists than a regular traversal!</description>
    </item>
    
    <item>
      <title>Make Mostly Read, Seldom-Written Lists Much More Efficient</title>
      <link>https://www.davidhaney.io/make-mostly-read-seldom-written-lists-much-more-efficient/</link>
      <pubDate>Fri, 15 Mar 2013 17:11:42 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/make-mostly-read-seldom-written-lists-much-more-efficient/</guid>
      <description>One of the many things that I do at work is run a full-blown Search Engine which I also developed from scratch. This Search Engine feeds all product related information to our websites.</description>
    </item>
    
    <item>
      <title>A Better MIME Mapping Stealer!</title>
      <link>https://www.davidhaney.io/a-better-mime-mapping-stealer/</link>
      <pubDate>Tue, 12 Feb 2013 12:07:12 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/a-better-mime-mapping-stealer/</guid>
      <description>In the interest of self-improvement and sharing knowledge, I felt that I should share an update to my last post. I discovered a slightly better way to create the GetMimeMapping delegate/method via reflection that involves less casting and overhead, and is more Object Oriented in a sense.</description>
    </item>
    
    <item>
      <title>Determine MIME Type from File Name</title>
      <link>https://www.davidhaney.io/determine-mime-type-from-file-name/</link>
      <pubDate>Mon, 11 Feb 2013 15:15:46 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/determine-mime-type-from-file-name/</guid>
      <description>I recently had a need, in an ASP.NET MVC3 application, to read raw HTML, CSS, JS, and image files from disk and return them to the user… A sort of “pass-through” if you will.</description>
    </item>
    
    <item>
      <title>Static vs Instance string.Equals Benchmark</title>
      <link>https://www.davidhaney.io/static-vs-instance-string-equals-benchmark/</link>
      <pubDate>Wed, 24 Oct 2012 16:57:14 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/static-vs-instance-string-equals-benchmark/</guid>
      <description>A friend of mine commented on my last post asking about how much faster the static string.Equals method is than the instance string.Equals method. To satiate both of our curiosities, I have created this benchmarking application:</description>
    </item>
    
    <item>
      <title>Static vs Instance string.Equals</title>
      <link>https://www.davidhaney.io/stats-vs-reference-string-equals/</link>
      <pubDate>Mon, 22 Oct 2012 14:57:14 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/stats-vs-reference-string-equals/</guid>
      <description>As you may or may not know, static methods are usually faster than instance methods. This alone should be a good enough reason to use the static string.Equals methodin .NET, but if that doesn’t do it for you, allow me to present a simple example.</description>
    </item>
    
    <item>
      <title>TPL and Error Handling &amp; Continuation Tasks</title>
      <link>https://www.davidhaney.io/tpl-and-error-handling-continuations/</link>
      <pubDate>Sun, 12 Aug 2012 23:21:30 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/tpl-and-error-handling-continuations/</guid>
      <description>Two of my colleagues (one from work and one from a user group) kindly pointed out to me that in my last post I omitted Continuation Tasksas a means of Error Handling for the TPL.</description>
    </item>
    
    <item>
      <title>TPL and Error Handling</title>
      <link>https://www.davidhaney.io/tpl-and-error-handling/</link>
      <pubDate>Sun, 05 Aug 2012 13:39:38 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/tpl-and-error-handling/</guid>
      <description>As of .NET 4.0, the TPL or Task Parallel Library is king when it comes to parallelization. It allows for smooth, easy multi-threading for any application. There is a slight learning curve, however, and a major part of this is understanding how Exceptions bubble-up while using the TPL.</description>
    </item>
    
    <item>
      <title>Compiler Tricks - Inferred Types</title>
      <link>https://www.davidhaney.io/compiler-tricks-inferred-types/</link>
      <pubDate>Mon, 16 Jul 2012 00:33:54 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/compiler-tricks-inferred-types/</guid>
      <description>The .NET compiler is a terrific thing… After all, it turns your C# into an executable program!
One nice feature of the .NET compiler, which is becoming better each release, is inferred typing.</description>
    </item>
    
    <item>
      <title>Custom Output Caching with MVC3 and .NET 4.0 - Done Properly!</title>
      <link>https://www.davidhaney.io/custom-output-caching-with-mvc3-and-net-4-0-done-right/</link>
      <pubDate>Wed, 20 Jun 2012 00:47:52 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/custom-output-caching-with-mvc3-and-net-4-0-done-right/</guid>
      <description>I came across a need at work today to re-implement some of the Output Caching for our MVC3 application which runs under .NET 4.0. I wanted to use standard Output Caching (via the OutputCacheAttributeclass, why re-invent the well-working wheel?</description>
    </item>
    
    <item>
      <title>LINQ and Deferred Execution</title>
      <link>https://www.davidhaney.io/linq-and-deferred-execution/</link>
      <pubDate>Mon, 11 Jun 2012 00:57:15 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/linq-and-deferred-execution/</guid>
      <description>As of .NET 3.0, LINQ (and the often related Lambda Expressions) have been available for our use and abuse. LINQ stands for Language INtegrated Query, and is a method of modelling OO data in a more or less relational sense that is not unlike databases.</description>
    </item>
    
    <item>
      <title>Make Your Debugging Life Easier</title>
      <link>https://www.davidhaney.io/make-your-debugging-life-easier/</link>
      <pubDate>Fri, 25 May 2012 20:25:36 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/make-your-debugging-life-easier/</guid>
      <description>Sorry for the delay in posts, May has been a very busy month.
In order to accurately debug or profile an external assembly or library (AKA one you’re not directly compiling), you need the associated PDB filesto accompany each of the DLLs.</description>
    </item>
    
    <item>
      <title>Who Loves Interns?</title>
      <link>https://www.davidhaney.io/who-loves-interns/</link>
      <pubDate>Wed, 02 May 2012 23:50:20 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/who-loves-interns/</guid>
      <description>The topic at hand is interning. More specifically, string interning.
“What is string interning?” you ask? Good question. As you may or may not know, strings are immutable reference types. This means that they are read-only and a pointer will refer to the string’s location on the heap.</description>
    </item>
    
    <item>
      <title>What is a Virtual Method, Anyway?</title>
      <link>https://www.davidhaney.io/what-is-a-virtual-method-anyway/</link>
      <pubDate>Sun, 29 Apr 2012 23:26:41 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/what-is-a-virtual-method-anyway/</guid>
      <description>Something which I feel carries a lot of confusion in the .NET realm is virtual methods. During interviews, I tend to ask candidates about virtual methods: why and when they’d use one, what the purposes is, how a virtual method “works” under the hood, and how it differs from “shadowing”.</description>
    </item>
    
    <item>
      <title>Why Use Interfaces?</title>
      <link>https://www.davidhaney.io/why-use-interfaces/</link>
      <pubDate>Thu, 26 Apr 2012 23:51:18 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/why-use-interfaces/</guid>
      <description>I’m a bit tipsy at the moment, so hopefully this post goes well.
A question that I like to ask while interviewing individuals is: “why would you want to use an interface?</description>
    </item>
    
    <item>
      <title>An Overview of Generic Constraints</title>
      <link>https://www.davidhaney.io/an-overview-of-generic-constraints/</link>
      <pubDate>Tue, 24 Apr 2012 21:46:41 +0000</pubDate>
      
      <guid>https://www.davidhaney.io/an-overview-of-generic-constraints/</guid>
      <description>This is my first post. I hope that it doesn’t suck.
As of .NET 2.0, Microsoft introduced the concept of generics. Generics is a concept that allow you to “template” methods and types such as classes and interfaces in a (generally) type-safe way.</description>
    </item>
    
  </channel>
</rss>
